<HTML>
<HEAD>
<TITLE>Ãdª«­pºâ¾÷</TITLE>

<STYLE type="text/css">

</STYLE>

<SCRIPT language="JavaScript">
<!--
//BUG:
//Yuna 90	115	36	45	30	2	4	7	3	6
//wront alignment at 99.98 spi
//TO DO LIST:
//get rid of extra space on the right out calc table
//group all language specific strings together
//fix up messy array structure
//allow ordering, perhaps multi-lv (2 is enough?)
//append string at beginning of each invalid/no solution input line to identify them as such
//* Implement non-lv1 calculations
//* Sim
//* Detailed Data (location, attribute, eff/non-eff against etc)
//Random Generate xx num of particular choice - add to textarea field
//* Testing input list to see fit for which ptTypes?
//*ranking of different races?

//How to deal with padding?
// - check length of max, pad all other based on this limit,
// - finally concatenate all pieces of the string together
//Should I check for total length? If length too long, remove padding accordingly
// - need to able to choose from "&nbsp|&nbsp" or "|"

//each solution can have a probability
//***listing probability will severely restrict spacing*** ' 78%' <- take 4 spaces
//to accommodate this, must rid of commas
//to calculate probability, need expand each set of solutions, then tally
//probability of the subsets.

//option to print/calculate probability and BPSum

// var           var                var??        var        fixed       fixed
//[ord] [        stat          ] | [  BP   ] |[minL~maxL]| [cfloss]  | [maxLoss]
//  #9: 102 168 40 39 29 103 100 | 5 6 5 3 1 |  -8 ~  -9 | 0,0,1,0,0 | 4,4,4,4,4
// #10: 103 170 40 38 30 103 100 | 5 6 4 3 1 |  -7 ~  -8 | 0,0,3,0,0 | 4,4,4,4,4
// #11:  97  75 40 38 30 103 100 | 4 6 4 3 2 |  -8 ~  -9 | 3,0,3,0,0 | 4,2,4,2,2

//How much data does any given pt has?
//race, BPCl are global
//order, stat[5], spi, rev, BP[5], lossMin, lossMax, cfLossSummary, maxLossSummary,
//and list of solutions[n], anything else? grIndexMax grIndexMin
//no need variable to store num of solution, just check solution length.

//write a method to compare two sets of stats?

//for each solution, need list class[5], loss, cfLoss[5] and maxLoss[5]
//stat[5], spi, rev and BP[5] are derived, later printed to 2 decide places
function sol(classes, grIndex) {
  this.gr = grIndex
  this.cl = new Array(5)
  for (var cla in classes) this.cl[cla] = classes[cla]
  //formula is: (baseBP+(40+gr)/1000*(level-1)), gr=0,1,2,3,4,5
  solBase = (base*1000 + (40 + this.gr)*(level-1))/1000
  this.BP = new Array(5)
  this.stat = new Array(5)
  this.loss = undefined
  this.cfLoss = new Array(0,0,0,0,0)
  this.maxLoss = new Array(5)
  for (var ba in this.cl) {
    this.BP[ba] = this.cl[ba]*solBase
    this.stat[ba] = stat(ba,this.cl)*solBase+20
  }
  this.spi = spi(this.cl)*solBase + 100
  this.rev = rev(this.cl)*solBase + 100
  return this
}

//stats are stored with base 20 removed
//BP and rec/spi are optional, and checked against if inputed
//only integer values matter
function pt(values) {
  var vLen = values.length
  doCheckBP = false
  if (values[0]==undefined || vLen<5) return this
  this.sols = new Array()
  this.stat = new Array(5)
  for (var j=0;j<5;j++) this.stat[j] = values[j]-20
  if (vLen>5 && vLen<10) {
    this.spi = values[5]
    if (vLen>6) this.rev = values[6]
    return this
  }
  //if length is  6, assume stat + spi
  //if length is  7, assume stat + spi + rev
  //if length is  8 or 9, only consider first 7
  //if length is 10, assume stat + BP,
  //if length is 11, assume stat + spi + BP (!!!could be stat + BP + BPSum!!)
  //could be stat+bp+ (-x~-x)
  //if length is 12, assume stat + spi + rev + BP(!!!could be stat + spi + BP + BPSum!!!)
  //could be stat+bp+ (-x~-x)
  //if length is 13, assume stat + spi + rev + BP + BPSum
  //if length is over 12, only consider first 12
  //move can be calculated by -10 from vLen, then set max to 2
  if (vLen>=10) {
    doCheckBP = true
    var move = Math.min(vLen-10,2) + 5
    if (vLen==11 || vLen==12) {
      //assumed values[5] is spi, now check assumption (move is now 6)
      //assumption is WRONG if last number equates to sum of the 5 numbers before it
      var sum = 0
      for (var j=(vLen-6);j<(vLen-1);j++) sum+=values[move+j]
      if (sum==values[vLen-1]) move--
      else if (values[5] > 20) {
        this.spi = values[5]
        if (vLen==12) this.rev=values[6]
      }
      else {
        move-= (vLen-10)
      }
    }
    if (vLen>11 && values[5]>20) this.spi = values[5]
    if (vLen>12 && values[6]>20) this.rev = values[6] //assume stat+spi+rev+BP+rubbish
    this.BP = new Array(5)
    for (var b=0;b<5;b++) this.BP[b] = values[b+move]
  }
  return this
}


// here starts some horrible programming
// re:
// 0 is stat given
// 1 indicate whether solution exist
// 2 is lossMin
// 3 is lossMax
// 4 is cfLossSummary
// 5 is maxLossSummary
// 6 is array of cor solutions
// 6[a][0][0~4] is class for solution a
// 6[a][1] is total loss for solution a
// 6[a][2][0~4] is cfLoss for solution a
// 6[a][3][0~4] is maxLoss for solution a

var o = "" //output of calculation
Pts = new Array(
  new Array(1,"ªê¤H",0,22,26,17,19,16),
  new Array(2,"¿ß§¯",0,19,24,17,28,17),
  new Array(3,"Ã¹«b",0,24,25,14,22,20),
  new Array(4,"¿ß¤H",0,23,27,15,26,14),
  new Array(5,"´cÅ]¿ß",0,21,23,12,27,22),
  new Array(6,"§¯ª°",0,18,30,11,25,26),
  new Array(7,"¥Þºµ",0,34,34,19,19,14),
  new Array(8,"¨ªºµ",0,35,36,15,20,14),
  new Array(9,"¥_·¥ºµ",0,36,33,22,18,11),
  new Array(10,"¨ª¥Ø¶Âºµ",0,33,35,14,22,16),
  new Array(11,"¿ßºµ",0,32,40,18,17,18),
  new Array(12,"¤j¦a¹«",0,6,13,20,26,35),
  new Array(13,"´c¹Ú¹«",0,4,8,18,33,37),
  new Array(14,"¤õµK¹«",0,7,12,15,34,32),
  new Array(15,"Ä_¥Û¹«",0,7,7,22,27,37),
  new Array(16,"¤ôÂÅ¹«",0,11,15,28,28,33),
  new Array(17,"¹«¤ý",0,15,7,19,32,42),
  new Array(18,"¦aº»¬Ýªù¤ü",0,26,36,12,23,18),
  new Array(19,"¥¨¯T",0,22,37,11,25,20),
  new Array(20,"¦aº»Ây¤ü",0,24,35,19,22,15),
  new Array(21,"¦aº»§¯¤ü",0,23,40,13,21,18),
  new Array(22,"íL«Í",1,37,32,12,12,12),
  new Array(23,"³à«Í",1,35,34,7,15,14),
  new Array(24,"­¹«Í°­",1,32,32,17,7,17),
  new Array(25,"»G«Í",1,42,37,12,7,7),
  new Array(26,"¤ì¤D¥ì",1,39,32,14,8,17),
  new Array(27,"¾uÅ\¾Ô¤h",1,12,27,42,12,17),
  new Array(28,"¦å¾uÅ\",1,13,24,41,10,22),
  new Array(29,"¦aº»¾uÅ\",1,14,30,40,11,15),
  new Array(30,"ªZ¸Ë¾uÅ\",1,9,26,47,8,20),
  new Array(31,"¾uÅ\®üµs",1,12,29,45,13,16),
  new Array(32,"«ÕÆF",1,19,18,31,20,27),
  new Array(33,"°­ÆF",1,9,21,27,25,33),
  new Array(34,"¤`ÆF",1,14,27,30,15,29),
  new Array(35,"¦ºÆF",1,10,28,32,17,28),
  new Array(36,"¤p¥Û¹³©Ç",2,16,21,11,31,26),
  new Array(37,"¨ÏÅ]",2,21,20,15,27,27),
  new Array(38,"¤ôÂÅ³¾Å]",2,22,23,10,25,25),
  new Array(39,"¤p´cÅ]",2,21,20,9,25,30),
  new Array(40,"°g§A¥Û¹³©Ç",2,23,19,10,24,29),
  new Array(41,"¥C¤ñ¯S",2,12,22,7,37,37),
  new Array(42,"¥Û¹³©Ç",2,14,30,32,22,22),
  new Array(43,"¦åÅ]",2,13,31,26,25,25),
  new Array(44,"¼Z¤Ñ¨Ï",2,11,28,28,27,26),
  new Array(45,"´cÅ]",2,10,27,26,26,31),
  new Array(46,"¤p½¿½»",2,11,26,16,31,21),
  new Array(47,"±½§â½¿½»",2,13,28,12,29,18),
  new Array(48,"°g§A½¿½»",2,11,26,20,27,16),
  new Array(49,"¤ôªG½¿½»",2,17,25,15,26,17),
  new Array(50,"´cÅ]½¿½»",2,13,34,10,29,24),
  new Array(51,"¤Ñ¨Ï½¿½»",2,9,22,12,37,30),
  new Array(52,"¤j½¿½»",2,23,28,23,28,13),
  new Array(53,"¥¨½¿½»",2,27,30,22,24,12),
  new Array(54,"®ü½¿½»",2,18,29,27,30,11),
  new Array(55,"­D½¿½»",2,25,24,20,26,20),
  new Array(56,"¨ß¦Õ½¿½»",2,21,26,18,31,14),
  new Array(57,"ÂÅÃÈ",3,20,27,47,13,8),
  new Array(58,"¬õÃÈ",3,19,28,42,19,7),
  new Array(59,"¶ÀÃÈ",3,20,30,43,12,10),
  new Array(60,"±þ¤âÃÈ",3,30,29,38,11,7),
  new Array(61,"±þ¤H¸Á",3,12,37,12,37,12),
  new Array(62,"²§«¬¸Á",3,14,33,11,35,17),
  new Array(63,"ªêÀY¸Á",3,13,40,8,38,11),
  new Array(64,"¶À¸Á",3,10,38,13,43,6),
  new Array(65,"¦º¤`¸Á",3,7,39,15,41,8),
  new Array(66,"Á®½¸",3,16,44,22,27,11),
  new Array(67,"±þ¤HÁ®½¸",3,12,45,20,26,17),
  new Array(68,"¨ª¥ØÁ®½¸",3,14,44,19,29,14),
  new Array(69,"¦º¦ÇÁ®½¸",3,15,40,17,33,15),
  new Array(70,"­P©RÁ®½¸",3,20,43,18,27,12),
  new Array(71,"¤g»jµï",3,26,15,18,23,23),
  new Array(72,"¤ô»jµï",3,24,16,17,20,28),
  new Array(73,"¤õ»jµï",3,22,22,16,25,20),
  new Array(74,"­·»jµï",3,25,28,15,19,18),
  new Array(75,"¾ðºë",4,32,17,32,12,17),
  new Array(76,"¦º¤`¾ðºë",4,28,20,37,9,16),
  new Array(77,"¶Àª÷¾ðºë",4,38,22,28,10,17),
  new Array(78,"ºG¥Õ¾ðºë",4,29,16,28,17,20),
  new Array(79,"¦B§N¾ðºë",4,30,15,27,16,22),
  new Array(80,"ªh¿A¾ðºë",4,31,14,29,15,21),
  new Array(81,"§¯¯ó",4,26,11,16,16,36),
  new Array(82,"½¯ªûÃ¹¯ó",4,25,13,14,15,38),
  new Array(83,"§¯ªá",4,27,12,12,19,35),
  new Array(84,"¤HÅ]¯ó",4,22,17,11,14,41),
  new Array(85,"ºñ¦â¤f¯ä°­",4,38,23,16,15,23),
  new Array(86,"¶À¦â¤f¯ä°­",4,37,27,18,11,22),
  new Array(87,"ÂÅ¦â¤f¯ä°­",4,35,25,15,18,27),
  new Array(88,"¬õ¦â¤f¯ä°­",4,44,21,14,12,29),
  new Array(89,"¥û¼É¥P¤H´x",4,27,29,22,12,20),
  new Array(90,"ªZ³N¥P¤H´x",4,24,32,27,10,17),
  new Array(91,"¨ß¦Õ¥P¤H´x",4,28,35,19,14,14),
  new Array(92,"¦L¦a¦w¥P¤H´x",4,26,36,24,9,15),
  new Array(93,"¤õµK»RªÌ",4,19,38,18,15,25),
  new Array(94,"¥vµÜ©i",5,46,26,11,6,16),
  new Array(95,"²GºA¥vµÜ©i",5,49,24,15,5,12),
  new Array(96,"ªG­á¥vµÜ©i",5,45,31,6,10,13),
  new Array(97,"¥¬¤B¥vµÜ©i",5,40,25,12,8,20),
  new Array(98,"¤õºë",5,25,25,25,25,25),
  new Array(99,"­·ºë",5,25,25,25,25,25),
  new Array(100,"¤ôºë",5,25,25,25,25,25),
  new Array(101,"¦aºë",5,25,25,25,25,25),
  new Array(102,"¹x¥Ö¬µ¼u",5,15,15,15,15,40),
  new Array(103,"Ä_¨©¬µ¼u",5,14,17,11,16,42),
  new Array(104,"¤j¬µ¼u",5,12,20,14,14,40),
  new Array(105,"º}¯B¬µ¼u",5,16,14,14,17,39),
  new Array(106,"¤Y¤l¬µ¼u",5,17,17,7,17,47),
  new Array(107,"¤Û¼v",5,20,26,25,17,32),
  new Array(108,"±Û«ß¼v¤l",5,24,28,22,19,27),
  new Array(109,"îî¼v",5,25,23,23,23,26),
  new Array(110,"³±¼v",5,28,24,22,22,24),
  new Array(111,"¦å¸{¤§¤b",6,9,39,34,14,24),
  new Array(112,"±þÀs¤§¤b",6,17,37,41,11,19),
  new Array(113,"¤õµK¤§¤b",6,10,39,28,12,31),
  new Array(114,"¯P­·¤§¤b",6,12,44,29,13,27),
  new Array(115,"À~¤H½c",6,11,26,26,11,31),
  new Array(116,"¨ß¦ÕÀ~¤H½c",6,9,24,23,16,33),
  new Array(117,"¬õÅ]À~¤H½c",6,12,32,27,12,27),
  new Array(118,"ÂÅÅ]À~¤H½c",6,15,37,28,8,22),
  new Array(119,"ºñµìÀ~¤H½c",6,13,35,29,10,23),
  new Array(120,"¯Â¥ÕÀ~¤H½c",6,9,24,29,11,37),
  new Array(121,"¦B©Ç",6,20,30,46,7,12),
  new Array(122,"¥Û©Ç",6,15,38,43,6,13),
  new Array(123,"»È©Ç",6,10,32,48,8,17),
  new Array(124,"ª÷©Ç",6,14,41,40,5,15),
  new Array(125,"´cÅ]¿ÀÃÉ",6,16,32,35,11,11),
  new Array(126,"¤ô´¹¿ÀÃÉ",6,18,31,36,10,10),
  new Array(127,"ÅK°Å¿ÀÃÉ",6,14,34,37,12,8),
  new Array(128,"¶Àª÷¿ÀÃÉ",6,22,30,34,7,12),
  new Array(129,"»h»i¾Ô¤h",7,22,32,32,12,12),
  new Array(130,"»h»i°«¤h",7,18,37,37,8,10),
  new Array(131,"»hç°ªZ¤h",7,20,31,30,15,14),
  new Array(132,"Ây°\»h»i",7,23,36,28,10,13),
  new Array(133,"¤j¦aÁlÀs",7,29,28,32,20,11),
  new Array(134,"´H¦BÁlÀs",7,30,30,31,17,12),
  new Array(135,"¤õµKÁlÀs",7,33,33,25,16,13),
  new Array(136,"¯P­·ÁlÀs",7,32,30,23,20,15),
  new Array(137,"ÁlÀs",7,32,30,26,19,18),
  new Array(138,"¦aÀs»h",7,29,34,34,15,8),
  new Array(139,"¤ôÀs»h",7,36,38,34,11,6),
  new Array(140,"¤õÀs»h",7,32,37,37,12,7),
  new Array(141,"­·Às»h",7,35,35,31,10,9),
  new Array(142,"­ô¥¬ªL",8,27,27,27,17,7),
  new Array(143,"¬õ´U­ô¥¬ªL",8,23,30,29,20,5),
  new Array(144,"¤õµK­ô¥¬ªL",8,22,28,26,15,14),
  new Array(145,"¯P­·­ô¥¬ªL",8,30,26,24,23,4),
  new Array(146,"¥¨¤H",8,38,35,24,9,14),
  new Array(147,"³æ²´¥¨¤H",8,34,34,20,12,20),
  new Array(148,"®õ©Z¥¨¤H",8,39,30,28,8,15),
  new Array(149,"¨È¯S©Ô´µ¥¨¯«",8,37,37,17,17,12),
  new Array(150,"µs¸é",8,23,28,21,31,12),
  new Array(151,"¤s¸é",8,28,27,24,26,10),
  new Array(152,"®üµs",8,19,31,23,28,14),
  new Array(153,"¯}Ãa¨g",8,27,26,30,24,8),
  new Array(154,"³¾¤H",8,17,17,17,37,22),
  new Array(155,"¤Ûºq§¯",8,15,18,20,38,19),
  new Array(156,"¬½¬r³¾¤H",8,18,19,14,39,20),
  new Array(157,"¯P­·³¾¤H",8,13,20,12,42,23),
  new Array(158,"¶Â·t³¾¤H",8,19,11,11,43,31),
  new Array(159,"¤s­¸¥Ò",0,27,21,15,30,27),
  new Array(160,"¿W¨¤Ã~",0,17,25,13,28,37),
  new Array(161,"¤Ñ°¨",0,22,22,12,32,32),
  new Array(162,"ÄQÅï",0,19,27,10,34,30),
  new Array(163,"¦a©³Àt",0,22,22,37,10,19),
  new Array(164,"®ü©³Àt",0,23,20,45,4,18),
  new Array(165,"¤õµKÀt",0,27,17,42,7,17),
  new Array(166,"µw´ßÀt",0,26,16,47,5,16),
  new Array(167,"ÅI¤MÅ]",1,23,35,18,17,32),
  new Array(168,"·t¶Â¹¬«Q",1,17,37,22,12,37),
  new Array(169,"±Ù­ºªÌ",1,19,42,20,15,29),
  new Array(170,"­ß¬É¦º¯«",1,25,40,12,21,27),
  new Array(171,"¤ú°©",1,27,32,32,12,7),
  new Array(172,"ÃE¤ú",1,32,29,37,7,5),
  new Array(173,"¥¨¤ú",1,25,30,27,17,11),
  new Array(174,"§Q¤ú",1,30,37,30,9,4),
  new Array(175,"·àølÃ~",2,22,32,12,42,17),
  new Array(176,"ÅÜºØ·àølÃ~",2,26,29,15,39,16),
  new Array(177,"¥¬¹p¼Ú",2,20,34,9,47,15),
  new Array(178,"¨Ì®æÃ¹´µ",2,18,36,11,44,16),
  new Array(179,"¦«Ã¹«Ò³¾",2,32,20,13,35,10),
  new Array(180,"©¥¦a¶]ªÌ",2,27,22,17,32,12),
  new Array(181,"¤õµK°Ö¤ì³¾",2,22,27,19,29,13),
  new Array(182,"¨g©b³¾",2,25,24,18,36,7),
  new Array(183,"¥ÒÂÎ",3,17,37,32,12,17),
  new Array(184,"±¸¦aÂÎ",3,20,35,36,8,16),
  new Array(185,"Áê«¬ÂÎ",3,15,39,29,14,18),
  new Array(186,"¿W¨¤¥P",3,18,41,34,9,14),
  new Array(187,"»AºñÛ£",4,37,12,12,17,37),
  new Array(188,"¤ôÂÅÛ£",4,38,15,13,15,34),
  new Array(189,"¯»¬õÛ£",4,35,10,15,14,41),
  new Array(190,"¬PÛ£",4,40,13,10,13,39),
  new Array(191,"ºñ·Ï",5,20,20,14,25,36),
  new Array(192,"·ÏÃú",5,23,23,8,30,31),
  new Array(193,"·ÏÃ¹",5,22,22,12,27,32),
  new Array(194,"´Ö²y",5,25,26,9,25,30),
  new Array(195,"¬Þ",6,15,15,45,15,30),
  new Array(196,"¼ç¬Þ",6,17,12,47,12,32),
  new Array(197,"±j¬Þ",6,19,13,49,11,28),
  new Array(198,"¯«¬Þ",6,16,9,50,8,37),
  new Array(199,"©¥©Ç",6,29,22,40,5,14),
  new Array(200,"Ãz©¥",6,30,20,42,6,12),
  new Array(201,"º²©¥",6,32,17,37,7,17),
  new Array(202,"¼v©¥",6,31,15,32,12,20),
  new Array(203,"§Æ¯S©Ô",7,42,42,27,7,7),
  new Array(204,"µëÀs",7,40,44,25,8,8),
  new Array(205,"®J¤Î²´Ãè³D",7,38,45,30,6,6),
  new Array(206,"¤K§Á¤j³D",7,46,46,23,5,5),
  new Array(207,"¤f³UÀs",7,15,34,21,20,25),
  new Array(208,"°g§AÀs",7,10,35,23,21,26),
  new Array(209,"ÂúÀs",7,12,32,22,22,27),
  new Array(210,"¥ÞÀs",7,11,31,20,25,28),
  new Array(211,"¤j«¬¥bÃ~¤H",8,34,25,35,10,11),
  new Array(212,"½Þ°­",8,33,28,33,11,10),
  new Array(213,"¿û°­",8,30,30,30,16,9),
  new Array(214,"¥bÃ~¤H",8,32,27,32,12,12),
  new Array(215,"³°¦æÃT",2,18,7,23,8,7),
  new Array(216,"¨F¦aÃT",2,23,13,28,13,8),
  new Array(217,"¥C³®ÃT",2,18,8,18,23,7),
  new Array(218,"©¥¥ÛÃT",2,28,18,23,13,18),
  new Array(219,"Âú³¾",2,7,4,3,28,33),
  new Array(220,"Àn¾ôÃ~",2,7,8,7,23,23),
  new Array(221,"¤pÀn¤l",2,2,23,2,18,33),
  new Array(222,"¤p¨ß¤l",2,8,18,8,13,33),
  new Array(223,"³J¥Õ¥Û©Ç",6,7,8,23,6,28),
  new Array(224,"¬õÄ_¥Û©Ç",6,7,7,23,6,28),
  new Array(225,"Æp¥Û©Ç",6,7,13,28,6,28),
  new Array(226,"¤ô´¹©Ç",6,18,8,33,6,43),
  new Array(227,"¤MÂû",0,4,8,7,23,8),
  new Array(228,"¼CÀk³¾",0,7,18,8,23,13),
  new Array(229,"¤j¤Mï{­]",0,7,23,8,23,18),
  new Array(230,"¤M¾Wªü©i³¾",0,7,28,8,23,23),
  new Array(231,"¤õ»h»i",7,23,8,8,8,18),
  new Array(232,"¬r»h»i",7,23,8,13,8,18),
  new Array(233,"¦B»h»i",7,26,11,34,7,27),
  new Array(234,"ª÷ÄÝ»h»i",7,23,13,23,7,7),
  new Array(235,"À¹¹u©Ç",3,7,8,3,23,18),
  new Array(236,"»R¹u©Ç",3,7,13,13,23,18),
  new Array(237,"¼ç¹u©Ç",3,7,18,7,23,18),
  new Array(238,"©N©N¹u©Ç",3,7,23,13,23,18),
  new Array(239,"¤j¤½Âû",1,2,42,2,42,47),
  new Array(240,"­C½Ï¹u©Ç",3,7,24,13,17,7),
  new Array(245,"ÅK·à",0,19,40,11,30,5),
  new Array(247,"¸õ¸õ¦a¹p",6,30,18,16,8,33),
  new Array(1255,"·Rµ·ªiªi",5,34,35,18,19,14),
  new Array(1022,"§ï³yíL«Í",1,41,36,16,16,16),
  new Array(1072,"§ï³y¤ô»jµï",3,28,20,21,24,32),
  new Array(1085,"§ï³yºñ¦â¤f¯ä°­",4,40,25,18,17,25),
  new Array(1108,"§ï³y¯Â¥Õ(±Û«ß)",5,12,27,32,14,40),
  new Array(1110,"§ï³y¨ß¦Õ(³±¼v)",5,29,25,23,23,25),
  new Array(2255,"¤G§ï·Rµ·ªiªi",5,37,37,22,22,17),
  new Array(5208,"µê®zªºÂú³¾",2,5,5,5,5,5),
  new Array(5004,"Àu©`",8,15,25,33,19,33),
  new Array(6004,"¤p¥i·RÀu©`",8,28,28,28,28,28),
  new Array(9001,"¤j¦a¤ûÀY©Ç",9,22,27,22,27,12),
  new Array(9002,"¤õµK¤ûÀY©Ç",9,22,27,22,27,12),
  new Array(9003,"´H¦B¤ûÀY©Ç",9,22,27,22,27,12),
  new Array(9004,"¯P­·¤ûÀY©Ç",9,22,27,22,27,12)
  )

calculated = false
failure = false
ptList = new Array()
classCalcOpen = true
oType = 1
BPNameList = new Array('Åé','¤O','±j','³t','Å]')
statNameList = new Array('¦å','Å]','§ð','¨¾','±Ó','ºë','¦^')
raceNames = new Array('³¥Ã~¨t','¤£¦º¨t','­¸¦æ¨t','©øÂÎ¨t','´Óª«¨t','¯S®í¨t','ª÷ÄÝ¨t','Às«¬¨t','¤H«¬¨t','¨¸Å]¨t')
level=1
base=0.2
inputBackup = ''

function loadMenu(menuIndex) {
  with (document.choose.ptMenu) {
    var itemNum=0
    document.choose.ptMenu.options.length=0;
    if (menuIndex==-1) {
      for (var ptNum in Pts) options[ptNum]=new Option(Pts[ptNum][1],Pts[ptNum][0])
    }
    else {
      for (var ptNum in Pts) {
        if (Pts[ptNum][2]==menuIndex) {
          options[itemNum]=new Option(Pts[ptNum][1],Pts[ptNum][0])
          itemNum++
        }
      }
    }
    choose.ptMenu.options[0].selected=true
    loadData()
  }
}

function findPtType(menuItemIndex) {
  menuItemIndex = parseInt(menuItemIndex)
  if (Pts[menuItemIndex] && (Pts[menuItemIndex][0]==menuItemIndex)) return menuItemIndex
  else for (var ptNum in Pts) if (Pts[ptNum][0] == menuItemIndex) return ptNum
}

function loadData() {
  sets = new Array()
  now = new Date()
  if (choose.ptMenu.value<0) {
    inputBackup = choose.input.value
    return
  }
  ptType = findPtType(choose.ptMenu.value)
  oType = choose.outputType.value
  level = parseInt(choose.ptLevel.value)
  var dataText
  dataText = "<TABLE><TR><TD><B>¹ÏÅ²½s¸¹:</B></TD><TD>&nbsp"
  dataText += Pts[ptType][0] + "</TD></TR><TR><TD><B>Ãdª«¦W:</B></TD><TD>"
  dataText += Pts[ptType][1] + "</TR><TR><TD><B>ºØ±Ú:</B></TD><TD>"
  dataText += raceNames[Pts[ptType][2]] + "</TR><TR><TD><B>³»ÀÉ¦¸:</B></TD><TD>"
  var totalClass = 0
  for (var i=3;i<8;i++) {
    dataText += BPNameList[i-3]
    dataText += Pts[ptType][i] + " "
    totalClass += Pts[ptType][i]
  }
  dataText += "</TD></TR><TR><TD><B>Á`¦¨ªø:</B></TD><TD>"
  dataText += totalClass + "</TD></TR></TABLE>"
  //for (var i in Pts[ptType]) {
  //  dataText += Pts[ptType][i] + " "
  //}
  //dataText = ''
  //dataText = Math.floor(50*0.2+23*2.7+12*0.3+7*0.3+11*0.2)
  //dataText = Math.floor(10+62.1+3.6+2.1+2.2)
  //choose.data.value = dataText
  printTo('data_area',dataText)
}

function calculate() {
  ptType = undefined
  loadData()
  if (ptType==undefined) {
    helpMessage()
    return
  }
  index  = Pts[ptType][0]
  name   = Pts[ptType][1]
  race   = Pts[ptType][2]
  base = 0.2
  if (index == 37 || index == 46 || index == 9001 || index == 9002 || index == 9003 || index == 9004) {
    base = 0.3
  }
  else if (index == 2255) {
    base = 0.25
  }
  parseLines(choose.input.value)
  li = 0
  for (li in sets) {
    parseLine(sets[li])
  }
  if (sets.length==0 || failure) {
    calculated = true
    failure = true
    printTo('helpText','½Ð¨Ì<b>¦åÅ]§ð¨¾±Ó ºë¦^ Åé¤O±j³tÅ]</b>¶¶§Ç¿é¤JÃdª«¯à¤O, ¨C¦æ¤@°¦Ãd, µM«á«ö<b>¶}©l­pºâ</b>. ºë¯«/¦^´_/BP¥i¥H¤£¶ñ.')
    return
  }
  if (choose.clearOutput.checked) o=''
  output()
  calculated = true
  return
}

function parseLines(lines) {
  var tempSets = lines.split(/\n/)
  var j=0
  for (var i in tempSets) {
    tempSets[i] = tempSets[i].split(/[^0-9#]/)
    var nums = new Array()
    var m=0
    for (var k in tempSets[i]) {
      tempSets[i][k] = parseInt(tempSets[i][k])
      if (!isNaN(tempSets[i][k])) {
        nums[m] = tempSets[i][k]
        m++
      }
    }
    tempSets[i] = nums
    if (tempSets[i].length>=5) {
      sets[j] = tempSets[i]
      j++
    }
  }
}

function parseLine(line) {
  numOfResults = 0
  BPClSum= 0
  BPCl   = new Array()
  BPMax  = new Array(5)
  BPMin  = new Array(5)
  cfLoss = new Array(0,0,0,0,0)
  maxLoss = new Array()
  totalLoss = 0
  lossMin = 20
  lossMax = 0
  cfLossSummary = new Array(4,4,4,4,4)
  maxLossSummary = new Array(0,0,0,0,0)
  for (var b=0;b<5;b++) {
    BPCl[b]  = Pts[ptType][b+3]
    BPClSum = BPClSum + BPCl[b]
  }
  //shift entire array if it appears first number represents level
  //this works up to lv 19
  if (line.length>5 && line[0]<20 && line[1]>20) line.shift()
  ptList[li] = new pt(line)
  var p = ptList[li]

//BEGIN INDEX USE
var errorMargin = 3
var loop = 6
if (level==1) {
  loop = 1
  errorMargin = 0
}
for (var gr=0;gr<loop;gr++) {
    for (var b=0;b<5;b++) {
      BPMax[b] = Pts[ptType][b+3] + 10
      BPMin[b] = Pts[ptType][b+3] - 4
    }
    baseBP = (base*1000+(40+gr)*(level-1))/1000
    //add('baseBP = ' + baseBP + '<BR>')
    if (p.BP) {
      //formula is: (base+(40+gr)/1000*(level-1)), gr=0,1,2,3,4,5
      for (var b in BPMax) {
        BPMax[b] = Math.min(BPMax[b],Math.floor((p.BP[b]+1+errorMargin)/baseBP))
        BPMin[b] = Math.max(BPMin[b],Math.ceil((p.BP[b]-errorMargin)/baseBP))
      }
    }
    BPMax[0] = Math.min(BPMax[0],Math.floor((p.stat[0]+1+errorMargin)/8/baseBP))
    BPMax[1] = Math.min(BPMax[1],Math.floor((p.stat[2]+1+errorMargin)/2.7/baseBP))
    BPMax[2] = Math.min(BPMax[2],Math.floor((p.stat[3]+1+errorMargin)/3/baseBP))
    BPMax[3] = Math.min(BPMax[3],Math.floor((p.stat[4]+1+errorMargin)/2/baseBP))
    BPMax[4] = Math.min(BPMax[4],Math.floor((p.stat[1]+1+errorMargin)/10/baseBP))
    //add('Early BPMax = ' + BPMax + '<BR>')
    //add('Early BPMin = ' + BPMin + '<BR>')
    var breaker = 0
    while (true) {
      breaker++
      var total = 0
      for (var q in BPMax) total = total+BPMax[q]-BPMin[q]
      BPMin[0] = Math.min(BPMax[0],Math.max(BPMin[0],Math.ceil((p.stat[0]-errorMargin-(BPMax[1]*2+BPMax[2]*3+BPMax[3]*3+BPMax[4]*1)*baseBP)/8/baseBP)))
      BPMin[1] = Math.min(BPMax[1],Math.max(BPMin[1],Math.ceil((p.stat[2]-errorMargin-(BPMax[0]*2+BPMax[2]*3+BPMax[3]*3+BPMax[4]*2)/10*baseBP)/2.7/baseBP)))
      BPMin[2] = Math.min(BPMax[2],Math.max(BPMin[2],Math.ceil((p.stat[3]-errorMargin-(BPMax[0]*2+BPMax[1]*3+BPMax[3]*3+BPMax[4]*2)/10*baseBP)/3/baseBP)))
      BPMin[3] = Math.min(BPMax[3],Math.max(BPMin[3],Math.ceil((p.stat[4]-errorMargin-(BPMax[0]*1+BPMax[1]*2+BPMax[2]*2+BPMax[4]*1)/10*baseBP)/2/baseBP)))
      BPMin[4] = Math.min(BPMax[4],Math.max(BPMin[4],Math.ceil((p.stat[1]-errorMargin-(BPMax[0]*1+BPMax[1]*2+BPMax[2]*2+BPMax[3]*2)*baseBP)/10/baseBP)))
      BPMax[0] = Math.max(BPMin[0],Math.min(BPMax[0],Math.floor(((p.stat[0]+1+errorMargin)-(BPMin[1]*2+BPMin[2]*3+BPMin[3]*3+BPMin[4]*1)*baseBP)/8/baseBP)))
      BPMax[1] = Math.max(BPMin[1],Math.min(BPMax[1],Math.floor(((p.stat[2]+1+errorMargin)-(BPMin[0]*2+BPMin[2]*3+BPMin[3]*3+BPMin[4]*2)/10*baseBP)/2.7/baseBP)))
      BPMax[2] = Math.max(BPMin[2],Math.min(BPMax[2],Math.floor(((p.stat[3]+1+errorMargin)-(BPMin[0]*2+BPMin[1]*3+BPMin[3]*3+BPMin[4]*2)/10*baseBP)/3/baseBP)))
      BPMax[3] = Math.max(BPMin[3],Math.min(BPMax[3],Math.floor(((p.stat[4]+1+errorMargin)-(BPMin[0]*1+BPMin[1]*2+BPMin[2]*2+BPMin[4]*1)/10*baseBP)/2/baseBP)))
      BPMax[4] = Math.max(BPMin[4],Math.min(BPMax[4],Math.floor(((p.stat[1]+1+errorMargin)-(BPMin[0]*1+BPMin[1]*2+BPMin[2]*2+BPMin[3]*2)*baseBP)/10/baseBP)))
      for (var q in BPMax) total = total-BPMax[q]+BPMin[q]
      if (total > 70 || total == 0 || breaker > 20) break;
    }
    //add('Gr    = ' + gr    + ' | ')
    //add('BPMax = ' + BPMax + ' | ')
    //add('BPMin = ' + BPMin + '<BR>')
    for (var a=BPMin[0];a<=BPMax[0];a++) {
      for (var b=BPMin[1];b<=BPMax[1];b++) {
        for (var c=BPMin[2];c<=BPMax[2];c++) {
          for (var d=BPMin[3];d<=BPMax[3];d++) {
            for (var e=BPMin[4];e<=BPMax[4];e++) {
              var cor = true
              var combo = new Array(a,b,c,d,e)
              for (var co in p.stat) {
                var thisStat = Math.floor(stat(co,a,b,c,d,e)*baseBP)
                if (level==1) cor = cor && thisStat == p.stat[co]
                else cor = cor && (Math.abs(thisStat-p.stat[co]) <= errorMargin)
                //add((Math.floor(stat(co,a,b,c,d,e)*baseBP) + 'vs' + p.stat[co]) + ' | ')
              }
              var sum = a+b+c+d+e
              cor = cor && ((BPClSum+10) >= sum)
              cor = cor && ((BPClSum-10) <= sum)
              if (cor && doCheckBP) {
                for (var x=0;x<5;x++) {
                  eval("cor = cor && (Math.floor(baseBP*"+String.fromCharCode(97+x)+")==p.BP[x])")
                }
                //add("BP check: " + baseBP*a + ' vs ' + p.BP[0] + "<BR>")
                //add("BP check: " + baseBP*b + ' vs ' + p.BP[0] + "<BR>")
                //add("BP check: " + baseBP*c + ' vs ' + p.BP[0] + "<BR>")
                //add("BP check: " + baseBP*d + ' vs ' + p.BP[0] + "<BR>")
                //add("BP check: " + baseBP*e + ' vs ' + p.BP[0] + "<BR>")
              }
              if (cor) {
                var sureLoss = Math.max(0,BPCl[0]-a)+Math.max(0,BPCl[1]-b)+
                  Math.max(0,BPCl[2]-c)+Math.max(0,BPCl[3]-d)+Math.max(0,BPCl[4]-e)
                totalLoss = BPClSum+10-sum
                if (sureLoss>totalLoss) cor = false
              }
              if (cor && p.spi!=undefined) {
                var thisSpi = Math.floor(spi(combo)*baseBP+100)
                if (level==1) cor = cor && (p.spi==thisSpi)
                else cor = cor && (Math.abs(thisSpi-p.spi) <= errorMargin)
                //add('p.spi = ' + p.spi + ' vs ' + 'cal = ' + Math.floor(spi(combo)*baseBP+100))
              }
              if (cor && p.rev!=undefined) {
                var thisRev = Math.floor(rev(combo)*baseBP+100)
                if (level==1) cor = cor && (p.rev==thisRev)
                else cor = cor && (Math.abs(thisRev-p.rev) <= errorMargin)
                //add('p.rev = ' + p.rev + ' vs ' + 'cal = ' + Math.floor(rev(combo)*baseBP+100))
              }
              if (cor) {
                var solution = new Array(a,b,c,d,e)
                p.sols[numOfResults] = new sol(solution,gr)
                numOfResults++
              }
            }
          }
        }
      }
    }
  }
//END OF INDEX USE

  if (numOfResults>0) {
    p.lossMin = 20
    p.lossMax = 0
    p.cfLossSummary = new Array(4,4,4,4,4)
    p.maxLossSummary = new Array(0,0,0,0,0)
    if (p.spi==undefined) p.spi = Math.floor(p.sols[0].spi)
    if (p.rev==undefined) p.rev = Math.floor(p.sols[0].rev)
    if (p.BP==undefined) {
      p.BP = new Array(5)
      for (var st=0;st<5;st++) p.BP[st] = Math.floor(p.sols[0].BP[st])
    }
  }
  for (var r=0;r<numOfResults;r++) {
    if (p.spi == undefined || (Math.floor(p.sols[r].spi) != p.spi)) p.spi = undefined
    if (p.rev == undefined || (Math.floor(p.sols[r].rev) != p.rev)) p.rev = undefined
    if (!doCheckBP) {
      //possible performance improvement here?
      for (var st=0;st<5;st++) {
        if (p.BP[st]==undefined) break
        else if (p.BP[st] != Math.floor(p.sols[r].BP[st])) p.BP[st] = undefined
      }
    }
    totalLoss = BPClSum+10
    for (var st=0;st<5;st++) {
      p.sols[r].cfLoss[st] = Math.max(0,BPCl[st]-p.sols[r].cl[st])
      totalLoss -= p.sols[r].cl[st]
    }
    var minLoss = Math.max(0,totalLoss-16)
    for (var st=0;st<5;st++) {
      p.sols[r].cfLoss[st] = Math.max(p.sols[r].cfLoss[st],minLoss)
      p.cfLossSummary[st] = Math.min(p.sols[r].cfLoss[st],p.cfLossSummary[st])
    }
    p.sols[r].loss = totalLoss
    p.lossMin = Math.min(p.lossMin,totalLoss)
    p.lossMax = Math.max(p.lossMax,totalLoss)
    var unCfLoss = totalLoss
    for (var st=0;st<5;st++) unCfLoss -= p.sols[r].cfLoss[st]
    for (var st=0;st<5;st++) {
      p.sols[r].maxLoss[st] = Math.min(unCfLoss+p.sols[r].cfLoss[st],4)
      p.maxLossSummary[st] = Math.max(p.sols[r].maxLoss[st],p.maxLossSummary[st])
    }
  }
  for (var st=0;st<5;st++) p.stat[st]+=20
}

function output() {
  if (ptList.length==1) add('<B>' + name + '¯à¤O¤ÀªR:</B><BR><FONT FACE="²Ó©úÅé,Courier,System,MS Sans Serif">')
  else add('<B>' + ptList.length + '°¦' + name + '¯à¤O¤À¥¬:</B><BR><FONT FACE="²Ó©úÅé,Courier,System,MS Sans Serif">')
  var maxStat = new Array(5)
  var minStat = new Array(5)
  //note: undefined values are ignored, and possible utilisation of sol data
  //      to determine max/min is NOT implmented
  var maxBP = new Array(5)
  var minBP = new Array(5)
  var maxSpi, maxRev, minSpi, minRev, maxLoss, minLoss
  var minCfLoss = new Array(5)
  var minMaxLoss = new Array(5)
  var maxCfLoss = new Array(5)
  var maxMaxLoss = new Array(5)
  var lossLeftLen=2, lossRightLen=2
  //TO DO: add Switch later for printSR
  var printSR = true

  //finding max and min values
  for (var st=0;st<5;st++) {
    maxStat[st] = ptList[0].stat[st]
    minStat[st] = ptList[0].stat[st]
    if (ptList[0].sols!=undefined && ptList[0].sols.length>0) {
      if (ptList[0].BP[st]) {
        maxBP[st] = ptList[0].BP[st]
        minBP[st] = ptList[0].BP[st]
      }
    }
  }
  for (var p in ptList) {
    for (var st=0;st<5;st++) {
      maxStat[st] = Math.max(maxStat[st],ptList[p].stat[st])
      minStat[st] = Math.min(minStat[st],ptList[p].stat[st])
      if (ptList[p].BP!= undefined && ptList[p].BP[st]) {
        if (maxBP[st]==undefined) {
          maxBP[st] = ptList[p].BP[st]
          minBP[st] = ptList[p].BP[st]
        }
        else {
          maxBP[st] = Math.max(maxBP[st],ptList[p].BP[st])
          minBP[st] = Math.min(minBP[st],ptList[p].BP[st])
        }
      }
    }
    if (ptList[p].sols.length>0) {
      if (maxLoss==undefined) {
        maxLoss = ptList[p].lossMin*100+ptList[p].lossMax
        minLoss = ptList[p].lossMin*100+ptList[p].lossMax
        for (var st=0;st<5;st++) {
          minCfLoss[st] = ptList[p].cfLossSummary[st]
          maxCfLoss[st] = ptList[p].cfLossSummary[st]
          minMaxLoss[st] = ptList[p].maxLossSummary[st]
          maxMaxLoss[st] = ptList[p].maxLossSummary[st]
        }
      }
      else {
        var thisLoss = ptList[p].lossMin*100+ptList[p].lossMax
        if (thisLoss > maxLoss) {
          maxLoss = thisLoss
          for (var st=0;st<5;st++) {
            maxCfLoss[st] = ptList[p].cfLossSummary[st]
            maxMaxLoss[st] = ptList[p].maxLossSummary[st]
          }
        }
        if (thisLoss < minLoss) {
          minLoss = thisLoss
          for (var st=0;st<5;st++) {
            minCfLoss[st] = ptList[p].cfLossSummary[st]
            minMaxLoss[st] = ptList[p].maxLossSummary[st]
          }
        }
      }
      if (lossRightLen==2 && ptList[p].lossMax>9 && (ptList[p].lossMax!=ptList[p].lossMin)) lossRightLen = 3
    }
    if (printSR) {
      if (ptList[p].spi!=undefined) {
        if (maxSpi==undefined) {
          maxSpi = ptList[p].spi
          minSpi = ptList[p].spi
        }
        else {
          maxSpi = Math.max(maxSpi,ptList[p].spi)
          minSpi = Math.min(minSpi,ptList[p].spi)
        }
      }
      if (ptList[p].rev!=undefined) {
        if (maxRev==undefined) {
          maxRev = ptList[p].rev
          minRev = ptList[p].rev
        }
        else {
          maxRev = Math.max(maxRev,ptList[p].rev)
          minRev = Math.min(minRev,ptList[p].rev)
        }
      }
    }
  }
  if (maxLoss>=1000) lossLeftLen=3
  var solLossPad = Math.max(lossLeftLen, lossRightLen)
  var checkUndefined = new Array('maxSpi', 'maxRev', 'minSpi', 'minRev', 'maxLoss', 'minLoss')
  for (var st in checkUndefined) if (!eval(checkUndefined[st])) eval(checkUndefined[st] + "='?'")
  for (var st=0;st<5;st++) {
    if (!maxBP[st]) maxBP[st]='?'
    if (!minBP[st]) minBP[st]='?'
  }
//actual printing bit start here:
  var ptL = Math.max((((ptList.length+1) + "").length + 2),4)
  var lineOutput = ""
  if (oType!=1) lineOutput += padc("right",4,"½s¸¹")
  for (var i=0;i<5;i++) {
    lineOutput += padc("right",(maxStat[i]+"").length,statNameList[i]) + '&nbsp'
    if (oType==1) lineOutput += '&nbsp&nbsp&nbsp'
  }
  lineOutput += padc("right",(maxSpi+"").length,statNameList[5]) + '&nbsp'
  if (oType==1) lineOutput += '&nbsp&nbsp&nbsp'
  lineOutput += padc("right",(maxRev+"").length,statNameList[6]) + '&nbsp'
  if (oType==1) lineOutput += '&nbsp&nbsp&nbsp'
  for (var i=0;i<5;i++) {
    if (i!=0 && (maxBP[0]+"").length>1 && (maxBP[i]+"").length>1) lineOutput += '&nbsp'
    lineOutput += padc("right",(maxBP[i]+"").length,BPNameList[i])
    if (oType==1) lineOutput+='&nbsp&nbsp'
  }
  lineOutput += padc("right",lossLeftLen,"ÀÉ")
  if (oType!=1) {
    lineOutput += pad("right",lossRightLen+3,"") + '&nbsp'
    lineOutput += "¦Ü¤Ö±¼&nbsp&nbsp&nbsp&nbsp³Ì¦h±¼"
  }
  else lineOutput += "&nbsp¦Ü¤Ö±¼³Ì¦h±¼"
  lineOutput += "<BR>"
  for (var p in ptList) {
    p = parseInt(p)
    lineOutput += pad("right",ptL,("#" + (p+1) + ":"))
    if (oType == 1) lineOutput += "<BR>"
    for (var st=0;st<5;st++) {
      lineOutput += pad("right",(maxStat[st]+"").length,ptList[p].stat[st]) + '&nbsp'
      if (oType==1) lineOutput += '&nbsp&nbsp&nbsp'
    }
    if (printSR) {
      lineOutput += pad("right",(maxSpi+"").length,ptList[p].spi) + '&nbsp'
      if (oType==1) lineOutput += '&nbsp&nbsp&nbsp'
      lineOutput += pad("right",(maxRev+"").length,ptList[p].rev) + '&nbsp'
      if (oType==1) lineOutput += '&nbsp&nbsp&nbsp'
    }
    for (var st=0;st<5;st++) {
      if (ptList[p].BP==undefined) lineOutput += pad("right",(maxBP[st]+"").length,undefined) + '&nbsp'
      else lineOutput += pad("right",(maxBP[st]+"").length,ptList[p].BP[st]) + '&nbsp'
      if (oType==1) lineOutput+='&nbsp&nbsp'
    }
    if (ptList[p].cfLossSummary==undefined) {
      lineOutput += "µL¸Ñ<BR>"
    }
    else {
      if (oType!=1) lineOutput += pad("right",lossLeftLen,"-" + ptList[p].lossMin)
      if (ptList[p].lossMin!=ptList[p].lossMax) {
        if (oType==1) lineOutput += pad("right",lossLeftLen,"-?") + '&nbsp'
        else lineOutput += " ~ " + pad("right",lossRightLen,"-" + ptList[p].lossMax) + '&nbsp'
      }
      else if (oType==1) lineOutput += pad("right",lossLeftLen,"-" + ptList[p].lossMin) + '&nbsp'
      else lineOutput += pad("right",lossRightLen+3,"") + '&nbsp'
      if (oType==1) {
        for (var st=0;st<5;st++) lineOutput+=ptList[p].cfLossSummary[st]
        lineOutput += '&nbsp'
        for (var st=0;st<5;st++) lineOutput+=ptList[p].maxLossSummary[st]
        lineOutput += '<BR>'
      }
      else lineOutput += ptList[p].cfLossSummary + '&nbsp' + ptList[p].maxLossSummary + '<BR>'
    }

    if (oType==1 && ptList[p].sols.length>0) {
      var solLine = ""
      for (var s in ptList[p].sols) {
        for (var st in ptList[p].sols[s].stat) {
          solLine += pad("right",(maxStat[st]+"").length+3,ptList[p].sols[s].stat[st].toFixed(2)) + '&nbsp'
        }
        solLine += pad("right",(maxSpi+"").length+3,ptList[p].sols[s].spi.toFixed(2)) + '&nbsp' + pad("right",(maxRev+"").length+3,ptList[p].sols[s].rev.toFixed(2)) + '&nbsp'
        for (var b in ptList[p].sols[s].BP) {
          solLine += pad("right",(maxBP[st]+"").length+2,ptList[p].sols[s].BP[b].toFixed(1)) + '&nbsp'
        }
        solLine += pad("right",solLossPad,'-' + ptList[p].sols[s].loss) + '&nbsp'
        for (var st=0;st<5;st++) solLine+=ptList[p].sols[s].cfLoss[st]
        solLine += '&nbsp'
        for (var st=0;st<5;st++) solLine+=ptList[p].sols[s].maxLoss[st]
        solLine += '<BR>'
      }
      solLine += '<BR>'
      lineOutput += solLine
    }
    if ((p%2)==0)  {
      add(lineOutput)
      lineOutput = ""
    }
  }
  //need to account for 0 after % operation

  if (ptList.length>1) {
    lineOutput += "<BR>"
    lineOutput += pad("right",ptL,"Max:")
    for (var st=0;st<5;st++) lineOutput += pad("right",(maxStat[st]+"").length,maxStat[st]) + '&nbsp'
    if (printSR) lineOutput += pad("right",(maxSpi+"").length,maxSpi) + '&nbsp' + pad("right",(maxRev+"").length,maxRev) + '&nbsp'
    for (var st=0;st<5;st++) lineOutput += pad("right",(maxBP[st]+"").length,maxBP[st]) + '&nbsp'
    if (isNaN(maxLoss)) lineOutput+="¥þ³¡µL¸Ñ.<BR>"
    else {
      lineOutput += pad("right",lossLeftLen,"-" + Math.floor(minLoss/100))
      if (Math.floor(minLoss/100)!=(minLoss%100)) lineOutput += ' ~ ' + pad("right",lossRightLen,"-" + (minLoss%100)) + '&nbsp'
      else lineOutput += pad("right",lossRightLen+3,"") + '&nbsp'
      lineOutput += minCfLoss + '&nbsp' + minMaxLoss + '<BR>'
    }
    lineOutput += pad("right",ptL,"Min:")
    for (var st=0;st<5;st++) lineOutput += pad("right",(maxStat[st]+"").length,minStat[st]) + '&nbsp'
    if (printSR) lineOutput += pad("right",(maxSpi+"").length,minSpi) + '&nbsp' + pad("right",(maxRev+"").length,minRev) + '&nbsp'
    for (var st=0;st<5;st++) lineOutput += pad("right",(maxBP[st]+"").length,minBP[st]) + '&nbsp'
    if (isNaN(maxLoss)) lineOutput+="¥þ³¡µL¸Ñ.<BR>"
    else {
      lineOutput += pad("right",lossLeftLen,"-" + Math.floor(maxLoss/100))
      if (Math.floor(maxLoss/100)!=(maxLoss%100)) lineOutput += ' ~ ' + pad("right",lossRightLen,"-" + (maxLoss%100)) + '&nbsp'
      else lineOutput += pad("right",lossRightLen+3,"") + '&nbsp'
      lineOutput += maxCfLoss + '&nbsp' + maxMaxLoss + '<BR>'
    }
  }

  ptList = new Array()
  end = new Date()
  lineOutput += '</FONT><BR>¦@¶O ' + (end-now)/1000 + ' ¬í<BR>' + '<HR NOSHADE COLOR="#6699CC">'
  add(lineOutput)
  printTo('myDiv3',o)
  printTo('helpText',"­pºâ§¹²¦.")
}

function pad(pos,len,text) {
  if (text==undefined) text = '?'
  text = ""+text
  len = (len-text.length)
  if (pos=="right") {
    for (var pa=0;pa<len;pa++) {
      text = "&nbsp" + text
    }
    return text
  }
  if (pos=="center") {
    for (var pa=0;pa<Math.floor(len/2);pa++) {
      text = "&nbsp" + text
    }
    for (var pa=0;pa<Math.ceil(len/2);pa++) {
      text = text + "&nbsp"
    }
    return text
  }
  if (pos=="left") {
    for (var pa=0;pa<len;pa++) {
      text = text + "&nbsp"
    }
    return text
  }
}

function padc(pos,len,text) {
  if (text==undefined) text = '?'
  text = ""+text
  len = (len-text.length*2)
  if (pos=="right") {
    for (var pa=0;pa<len;pa++) {
      text = "&nbsp" + text
    }
    return text
  }
  if (pos=="center") {
    for (var pa=0;pa<Math.floor(len/2);pa++) {
      text = "&nbsp" + text
    }
    for (var pa=0;pa<Math.ceil(len/2);pa++) {
      text = text + "&nbsp"
    }
    return text
  }
  if (pos=="left") {
    for (var pa=0;pa<len;pa++) {
      text = text + "&nbsp"
    }
    return text
  }
}

function rev(list) {
  return ((list[0]*8 - list[1] - list[2] + list[3]*2 - list[4]*3) / 10)
}

function spi(list) {
  return ((-list[0]*3 - list[1] + list[2]*2 - list[3]*1 + list[4]*8) / 10)
}

function stat(type,a,b,c,d,e) {
  if (arguments.length==2) {
    return stat(type,arguments[1][0],arguments[1][1],arguments[1][2],arguments[1][3],arguments[1][4])
  }
  var precision = 3
  a = a.toFixed(precision)
  b = b.toFixed(precision)
  c = c.toFixed(precision)
  d = d.toFixed(precision)
  e = e.toFixed(precision)
  type = parseInt(type)
  switch (type) {
    case 0 : return a*8+b*2+c*3+d*3+e*1
    case 1 : return a*1+b*2+c*2+d*2+e*10;
    case 2 : return (a*2+b*27+c*3+d*3+e*2)/10
    case 3 : return (a*2+b*3+c*30+d*3+e*2)/10
    default: return (a*1+b*2+c*2+d*20+e*1)/10
  }
}

function getRefToDiv(divID) {
    if( document.layers ) { //Netscape layers
        return document.layers[divID]; }
    if( document.getElementById ) { //DOM; IE5, NS6, Mozilla, Opera
        return document.getElementById(divID); }
    if( document.all ) { //Proprietary DOM; IE4
        return document.all[divID]; }
    return false;
}

function add(text) {o+=text}

function printTo(divID, text) {
  if (divID=='helpText') text+= '<HR NOSHADE COLOR="#6699CC">'
  myRef = getRefToDiv(divID)
  if( typeof( myRef.innerHTML ) != 'undefined' ) {
    //used by the IE series, Konqueror, Opera 7+ and Gecko browsers
    myRef.innerHTML = text;
  } else {
    if( myRef.document && myRef.document != window.document ) {
      //used by layers browsers
      myRef.document.open();
      myRef.document.write(text);
      myRef.document.close();
    } else {
      if( window.frames && window.frames.length && window.frames['nameOfIframe'] ) {
        //used by browsers like Opera 6-
        myRef = window.frames['nameOfIframe'].window;
        myRef.document.open();
        myRef.document.write(text);
        myRef.document.close();
      }
    }
  }
}

function showDiv(divID) {
    myRef = getRefToDiv(divID)
    if( !myRef ) return
    if( myRef.style ) myRef.style.visibility = 'visible'
    else if( myRef.visibility ) myRef.visibility = 'show'
    return
}

function hideDiv(divID) {
    myRef = getRefToDiv(divID)
    if( !myRef ) return
    if( myRef.style ) myRef.style.visibility = 'hidden'
    else if( myRef.visibility ) myRef.visibility = 'hide'
    return
}

function helpMessage() {
  if (failure) {
    printTo('helpText','½ÐÀË¬d¼Æ¾Ú¨Ã¨Ì<b>¦åÅ]§ð¨¾±Ó ºë¦^ Åé¤O±j³tÅ]</b>¶¶§Ç¿é¤JÃdª«¯à¤O, ¨C¦æ¤@°¦Ãd, µM«á«ö<b>¶}©l­pºâ</b>. ºë¯«/¦^´_/BP¥i¥H¤£¶ñ.')
    return
  }
  if (choose.ptMenu.value=="-1") {
    printTo('helpText','½Ð¿ï¨ú±ý­pºâªºÃdª«.')
  }
  else if (choose.input.value=='')
    printTo('helpText','½Ð¨Ì<b>¦åÅ]§ð¨¾±Ó ºë¦^ Åé¤O±j³tÅ]</b>¶¶§Ç¿é¤JÃdª«¯à¤O, ¨C¦æ¤@°¦Ãd, µM«á«ö<b>¶}©l­pºâ</b>. ºë¯«/¦^´_/BP¥i¥H¤£¶ñ.')
  else if (calculated && !failure) printTo('helpText','­pºâ§¹²¦.')
  else printTo('helpText','·Ç³Æ´Nºü, ¥i¥H¶}©l­pºâ.')
  return
}

function notDone() {
  calculated = false
  failure = false
}

function clearInput() {
  if (choose.input.value!='') inputBackup = choose.input.value
  choose.input.value=''
}

function restoreInput() {
  if (inputBackup!='') choose.input.value = inputBackup
}

function toggleCalc() {
  if (classCalcOpen) {
    hideDiv('classCalc')
    showDiv('sim')
    classCalcOpen=false
    printTo('switch','¤Á´«¦Ü¤@¯ÅÃdª«ÀÉ¦¸­pºâ¾÷')
    printTo('heading','Ãdª«¦¨ªø¼ÒÀÀ')
  }
  else {
    hideDiv('sim')
    showDiv('classCalc')
    classCalcOpen=true
    printTo('switch','¤Á´«¦ÜÃdª«¦¨ªø¼ÒÀÀ')
    printTo('heading','¤@¯ÅÃdª«ÀÉ¦¸­pºâ¾÷')
  }
}

//-->
</SCRIPT>

<META content="Microsoft FrontPage 5.0" name=GENERATOR></HEAD>
<BODY text=#000000 vLink=#FF0000 aLink=#6699CC link=#0000FF>
<CENTER>
<H1>Ãdª«­pºâ¾÷ Ver 0.95</H1></CENTER>
<FORM name=choose>
<DIV id=myDiv 
style="LEFT: 10px; POSITION: relative; TOP: 0px; BACKGROUND-COLOR: #FFFFFF">
<div align="center">
  <center>
<TABLE borderColor=#6699CC border=3 width="580" cellspacing="1">
  <TBODY>
  <TR>
    <TD>
    <p align="center"><b>Ãdª«³]©w</b></TD>
    <TD align=left width="50%"><B>
      <DIV id=heading>
        <p align="center">¤@¯ÅÃdª«ÀÉ¦¸­pºâ¾÷</DIV></B><!--
<A HREF="javascript:void(0)" onClick="toggleCalc()"><DIV id="switch">¤Á´«¦ÜÃdª«¦¨ªø¼ÒÀÀ</DIV></A>
//--><A 
      onclick=javascript:void(0) href="javascript:void(0)">
      <DIV id=switch></DIV></A></TD>
    </TR>
  <TR>
    <TD noWrap width=110><SMALL>µ¥¯Å</SMALL> <INPUT maxLength=3 size=3 value=1 
      name=ptLevel><BR><SMALL>ºØ±Ú:</SMALL> <SELECT 
      onchange=loadMenu(this.selectedIndex-1); size=1 name=raceMenu> <OPTION 
        value=-1 selected>¥þºØ±Ú 
        <SCRIPT language=JavaScript>
           <!--
             for (var i in raceNames) {
               document.write('<OPTION VALUE="' + i + '">' + raceNames[i])
             }
           //-->
         </SCRIPT>
        </OPTION></SELECT><BR>
      <CENTER>
      <SELECT onblur=helpMessage() onfocus=helpMessage() 
      onchange=loadData();helpMessage() size=10 name=ptMenu> <OPTION value=-1 
        selected>Ãdª«¦W: 
        <SCRIPT language=JavaScript>
          <!--
            for (var i in Pts) {
              document.write('<OPTION VALUE="' + Pts[i][0] + '">' + Pts[i][1])
            }
            //choose.ptMenu.selectedIndex=0
          //-->
        </SCRIPT>
        </OPTION></SELECT></CENTER>
    <TD>
      <DIV id=sim 
      style="LEFT: 140px; VISIBILITY: hidden; POSITION: absolute; TOP: 50px; BACKGROUND-COLOR: #FFFFFF; xIndex: 100">
      <TABLE border=3>
        <SCRIPT language=JavaScript>
          <!--
            document.write('<TR><TD></TD><TH>0</TH>')
            for (var col=1;col<5;col++) {
              document.write('<TH>-' + col + '</TH>')
            }
            document.write('</TR>')
            for (var row=1;row<6;row++) {
              document.write('<TR><TH>' + BPNameList[row-1] + '</TH>')
              document.write('<TD><INPUT TYPE="radio" NAME="BP' + row + '" VALUE="0" CHECKED></TD>')
              for (var col=1;col<5;col++) {
                document.write('<TD><INPUT TYPE="radio" NAME="BP' + row + '" VALUE="' + col + '"></TD>')
              }
              document.write('</TR>')
            }
          //-->
        </SCRIPT>

        <TBODY></TBODY></TABLE></DIV>
      <DIV id=classCalc style="BACKGROUND-COLOR: #FFFFFF">
      <TABLE borderColor=#6699CC border=3>
        <TBODY>
        <TR>
          <TD rowSpan=2>
          <TEXTAREA onblur=helpMessage() onfocus=helpMessage() name=input rows=11 wrap=off cols=56 onchange=notDone()>¥i¦P®ÉÅçºâ¦h°¦¦Pµ¥¯ÅÃdª«ÀÉ¦¸&#12290;
¨Ï¥Î¤èªk¡G
¥ý¿ï¾Ü¥ªÃä»Ý­n­pºâªºÃdª«¦W¡A¦A©ó¥»®æ¤¤¨Ì§Ç¶ñ¤J
¯à¤O­È: ¦å¶q Å]¤O §ðÀ» ¨¾¿m ±Ó±¶ ºë¯« ¦^´_ ¤Î
BP­È: Åé¤O ¤O¶q ±j«× ³t«× Å]ªk. (ºë/¦^/BP¥i¤£¶ñ.)
¿é¤J½d¥»(³æ°¦Ãd)¡G
98 65 41 40 29 99 103 4 6 5 3 1
©Î(¦h°¦Ãd, ¨C¦æ¤@°¦Ãd)¡G
98 65 41 40 29 99 103 4 6 5 3 1
100 72 41 38 29 99 103 5 6 4 3 1
      </TEXTAREA> </TD>
          <TD vAlign=bottom align=left><SELECT 
            onchange=notDone();helpMessage() name=outputType> <OPTION value=0 
              selected>Åã¥ÜºK­n<OPTION value=1>Åã¥Ü©ú²Ó</OPTION></SELECT> </TD>
        <TR>
          <TD vAlign=bottom><INPUT onmouseover="printTo('helpText','ÂI¦¹²M°£¼Æ¾Ú...')" onclick=clearInput() onmouseout=helpMessage() type=button align=center value=²M°£¼Æ¾Ú><BR><INPUT onmouseover="printTo('helpText','ÂI¦¹ÁÙ­ì³Q²M°£¼Æ¾Ú...')" onclick=restoreInput() onmouseout=helpMessage() type=button align=center value=ÁÙ­ì¼Æ¾Ú><BR>
          <INPUT 
            type=checkbox CHECKED name=clearOutput value="ON">­pºâ«á²M°£¤Wµ§µ²ªG<BR><BR><BR><INPUT onmousedown="printTo('helpText','­pºâ¤¤...')" onmouseover="printTo('helpText','ÂI¦¹¶}©l­pºâ...')" onclick=calculate() onmouseout=helpMessage() type=button align=center value=¶}©l­pºâ> 
          </TD></TR></TR></TBODY></TABLE></DIV></TD></TR></TBODY></TABLE>
  </center>
</div>
</DIV>
<TABLE>
  <TBODY>
  <TR>
    <TD>
      <DIV id=data_area 
    style="LEFT: 10px; POSITION: relative; TOP: 20px"></DIV></TD>
    <TD>
      <DIV id=helpText 
      style="LEFT: 10px; POSITION: relative; TOP: 20px">½Ð¿ï¨ú±ý­pºâªºÃdª«.</DIV></TD></TR></TBODY></TABLE></FORM><NOBR>
<DIV id=myDiv3 style="LEFT: 0px; POSITION: relative; TOP: 0px"></DIV></NOBR>
<SCRIPT language=JavaScript1.2>
if (Date.parse(document.lastModified)!=0) document.write("<BR>³Ì«á§ó·s®É¶¡: " + document.lastModified +"<BR><BR>")
document.write("°Q½×½Ð¦Ü ¤Ú«¢©i¯S (<b>bbs.gamer.com.tw</b>) CrossGate-TªO<BR><BR>")
document.write("by <I>®g¤â¬P¨t</I> - ­·¬Y")
</SCRIPT>

<HR color=#6699CC noShade>
</BODY></HTML>